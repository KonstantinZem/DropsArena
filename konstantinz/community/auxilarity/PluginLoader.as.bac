package konstantinz.community.auxilarity{
  	import flash.display.Sprite;
  	import flash.display.Loader;
  	import flash.events.*;
	import flash.net.URLRequest;
	import externutils.ClassLoader;
	
	public class PluginLoader extends Sprite{
		private var pluginsList:Array;//Ссылка на список плагинов в списки передаваемых ролику опций
		private var errorType:Object;
		private var currentPlugName:String;
		private var m_loader:Array;
		private var currentPlNumber:int
		private var content:Array
		private var loadedClass:Class;
		private var options:Object;
		private var debugLevel:Boolean;
		private var msgString:String;
		
		function PluginLoader(opt:Object){
			errorType = new ModelErrors();
			try{
				this.options = opt;
				this.debugLevel = options.debugLevel;
				this.m_loader = new Array();
				this.currentPlNumber = 0;
				this.pluginsList = options.pluginsList;
			
			for(var i:int = 0; i<pluginsList.length;i++){
				m_loader[i] = new ClassLoader();
				}
			 
			 content = new Array();
			 loadPlugins(currentPlNumber)
		
			}
			catch(error:ArgumentError){
				trace("<Error> " +  error.message);
				}
			}
		
		public function loadPlugins(i:int):*{
			
			if(i>pluginsList.length-1){//Когда список плагинов закончился, прерываемся
				return 'complite';
				}
           else{
			    msgString = 'Load plugin ' + i + '...';
				debugMsg(msgString)
				m_loader[i].addEventListener(ClassLoader.CLASS_LOADED, onComplete);
				m_loader[i].addEventListener(ClassLoader.LOAD_ERROR, onError);
				m_loader[i].load(pluginsList[i]);
				currentPlugName = pluginsList[i];
				}
			}
			
			function onComplete(e:Event):void{
				//Отделяем имя плагина из названия файла и его пути
				var plugDir:Array = currentPlugName.split("/"); 
				var plugFile:Array = plugDir[1].split(".");
				var className:String = plugFile[0];
			
				m_loader[currentPlNumber].removeEventListener(Event.COMPLETE, onComplete);
			
				msgString = 'Plugin '+ currentPlNumber +': ' + className + ' has loaded';
				debugMsg(msgString)
				loadedClass = m_loader[currentPlNumber].getClass(className);
				currentPlNumber++;
    			content[currentPlNumber] = new loadedClass();
				addChild(content[currentPlNumber])
				loadPlugins(currentPlNumber);
				
				}
			
			function onError(e:Event):void{
				msgString = 'Error plagin has not loaded. ' + errorType.fileNotFound
				debugMsg(msgString)
				//m_loader.removeEventListener(IOErrorEvent.IO_ERROR,onError);
				}
			private function debugMsg(msg:String):void{
				if(debugLevel){
				trace(msg);
				}
			}
		}
	}
